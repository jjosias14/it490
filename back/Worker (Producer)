import pika
import json
import mysql.connector
from mysql.connector import Error
import bcrypt  # Import the bcrypt library

# Database configuration
db_config = {
    'host': 'localhost',
    'user': 'admin',
    'password': 'password',
    'database': 'recipe_app'
}

def db_connect():
    """Establish a connection to the database."""
    return mysql.connector.connect(**db_config)

def validate_user_credentials(username, password):
    """Validate login credentials against hashed password in the database."""
    try:
        conn = db_connect()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT password FROM user WHERE username = %s", (username,))
        user_record = cursor.fetchone()
        cursor.close()
        conn.close()
        if user_record and bcrypt.checkpw(password.encode('utf-8'), user_record['password'].encode('utf-8')):
            return True
        return False
    except Error as e:
        print(f"Database error: {e}")
        return False

def create_user(username, password):
    """Hash the password and store the new user in the database."""
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    try:
        conn = db_connect()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO user (username, password) VALUES (%s, %s)", (username, hashed_password.decode('utf-8')))
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Error as e:
        print(f"Database error: {e}")
        return False

def on_request(ch, method, props, body):
    """Handle incoming RPC requests for user authentication."""
    request = json.loads(body)
    action = request.get('action')
    data = request.get('data')
    
    response = {}
    if action == 'login':
        # Validate login credentials
        success = validate_user_credentials(data['username'], data['password'])
        response = {'success': success, 'token': 'JWT_TOKEN_HERE_IF_SUCCESSFUL' if success else ''}
    elif action == 'register':
        # Register a new user
        success = create_user(data['username'], data['password'])
        response = {'success': success}

    ch.basic_publish(
        exchange='',
        routing_key=props.reply_to,
        properties=pika.BasicProperties(correlation_id=props.correlation_id),
        body=json.dumps(response))
    ch.basic_ack(delivery_tag=method.delivery_tag)

# Establish connection and start server
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

channel.queue_declare(queue='auth_queue')
channel.basic_qos(prefetch_count=1)
channel.basic_consume(queue='auth_queue', on_message_callback=on_request)

print("Awaiting RPC requests")
channel.start_consuming()

